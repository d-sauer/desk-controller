// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/d-sauer/exploring-go/desk-controller/internal/domain/services (interfaces: DeskControllerService)

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	domain "github.com/d-sauer/exploring-go/desk-controller/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockDeskControllerService is a mock of DeskControllerService interface.
type MockDeskControllerService struct {
	ctrl     *gomock.Controller
	recorder *MockDeskControllerServiceMockRecorder
}

// MockDeskControllerServiceMockRecorder is the mock recorder for MockDeskControllerService.
type MockDeskControllerServiceMockRecorder struct {
	mock *MockDeskControllerService
}

// NewMockDeskControllerService creates a new mock instance.
func NewMockDeskControllerService(ctrl *gomock.Controller) *MockDeskControllerService {
	mock := &MockDeskControllerService{ctrl: ctrl}
	mock.recorder = &MockDeskControllerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeskControllerService) EXPECT() *MockDeskControllerServiceMockRecorder {
	return m.recorder
}

// Activate mocks base method.
func (m *MockDeskControllerService) Activate(arg0 domain.Controller, arg1 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Activate", arg0, arg1)
}

// Activate indicates an expected call of Activate.
func (mr *MockDeskControllerServiceMockRecorder) Activate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Activate", reflect.TypeOf((*MockDeskControllerService)(nil).Activate), arg0, arg1)
}

// Find mocks base method.
func (m *MockDeskControllerService) Find(arg0 string) (domain.Controller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(domain.Controller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockDeskControllerServiceMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockDeskControllerService)(nil).Find), arg0)
}

// List mocks base method.
func (m *MockDeskControllerService) List() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]string)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockDeskControllerServiceMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDeskControllerService)(nil).List))
}

// Load mocks base method.
func (m *MockDeskControllerService) Load(arg0 []domain.Controller) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Load", arg0)
}

// Load indicates an expected call of Load.
func (mr *MockDeskControllerServiceMockRecorder) Load(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockDeskControllerService)(nil).Load), arg0)
}
