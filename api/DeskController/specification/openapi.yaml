openapi: 3.0.0
info:
  title: desk-controller
  version: 1.0.0
  contact:
    name: Davor
    email: davor.sauer@gmail.com
  description: API schema for desk controller service powered by RaspberryPI
servers:
  - url: https://localhost:9070/deskctr
paths:
  /service/health:
    get:
      tags:
        - service
      operationId: get-service-health
      description: Health information of the service
      responses:
        '200':
          description: OK
#          headers:
#            "correlation-id":
#              $ref: "#/components/headers/correlation-id"
#            "traceparent":
#              $ref: "#/components/headers/traceparent"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Health"
              examples:
                Up status:
                  $ref: "common/examples/200-health.yaml"
  /v1/controllers:
    get:
      tags:
        - controller
      operationId: get-controllers
      description: Get list of available controllers
      responses:
        '200':
          description: "Return list of configured controllers"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Controllers"
  /v1/controllers/{controllerSlug}:
    get:
      tags:
        - controller
      operationId: get-controller-status
      description: Get status of the specific controller
      parameters:
        - name: controllerSlug
          in: path
          required: true
          description: The slug/id of the controller in kebab-case format
          schema:
            type: string
      responses:
        "200":
          description: ''
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControllerStatus"
    post:
      tags:
        - controller
      operationId: controller-action
      description: Controller action
      parameters:
        - name: controllerSlug
          in: path
          required: true
          description: The slug/id of the controller
          schema:
            type: string
      requestBody:
        description: Action to perform on the controller
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ControllerAction'
      responses:
        '202':
          description: "Action is accepted and in progress. Use get to retrieve status information on progress."
          content:
            application/json:
              schema:
                type: object
                properties:
                  action-id:
                    type: string
                    format: uuid
                  time:
                    type: string
                    format: date-time
                  status:
                    type: string
                    enum:
                      - pending
                      - in-progress
                      - paused
                      - stop
                      - done
components:
  headers:
    "correlation-id":
      $ref: "common/headers/correlation-id.yaml"
    "traceparent":
      $ref: "common/headers/traceparent.yaml"
  schemas:
    Controllers:
      $ref: common/models/controllers.yaml
    ControllerStatus:
      $ref: common/models/controller-status.yaml
    ControllerAction:
      $ref: common/models/controller-action.yaml
    Error:
      $ref: common/models/error.yaml
    Health:
      $ref: common/models/health.yaml
  parameters:
    controllerSlugParam:
      name: controllerSlug
      in: path
      required: true
      description: The slug/id of the controller, in kebab-case format
      schema:
        type: string
  responses:
    '400':
      description: 400 Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            400 Bad Request:
              $ref: "common/examples/400.yaml"
    '401':
      description: 401 UNAUTHORIZED
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            401 UNAUTHORIZED:
              $ref: "common/examples/401.yaml"
    '403':
      description: 403 FORBIDDEN
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            403 FORBIDDEN:
              $ref: "common/examples/403.yaml"
    '404':
      description: 404 Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            404 Not Found:
              $ref: "common/examples/404.yaml"
    '405':
      description: 405 Method Not Allowed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            405 Method Not Allowed:
              $ref: "common/examples/405.yaml"
